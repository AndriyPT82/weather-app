{"version":3,"sources":["helpers.js","components/CurrentDay/CurrentDay.jsx","components/Weekday/Weekday.jsx","components/Weekdays/Weekdays.jsx","components/Input/Input.jsx","App.jsx","api/weatherApiService.js","index.jsx"],"names":["kelvinToCelsius","tmp","toFixed","CurrentDay","cityName","dt","humidity","temp","weather","wind_speed","currentDate","Date","className","toLocaleDateString","weekday","src","icon","alt","description","day","Weekday","index","useContext","IndexDayContext","indexDay","setIndexDay","classNames","onClick","Weekdays","forecast","map","Fragment","Input","setCoords","useState","inputValue","setInputValue","appliedQuery","setAppliedQuery","foundCities","setFoundCities","handleSubmit","event","currentTarget","value","latitude","longitude","setTimeout","applayQuery","useCallback","func","delay","timer","clearTimeout","args","debounce","useEffect","length","fetch","process","data","then","response","json","res","catch","err","console","error","type","placeholder","onChange","target","disabled","city","name","country","React","createContext","App","coords","dataFromApi","setDataFromApi","navigator","geolocation","getCurrentPosition","position","handleFetch","request","today","daily","weekWeather","slice","Promise","all","getLocalForecast","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59e20a33.chunk.js","sourcesContent":["export const kelvinToCelsius = (tmp) => {\n  return (tmp - 273.15).toFixed() + 'Â° C'\n}","import React from 'react';\nimport { kelvinToCelsius } from '../../helpers.js'\nimport './CurrentDay.scss'\n\n\nexport const CurrentDay = ({\n  cityName,\n  dt,\n  humidity,\n  temp,\n  weather,\n  wind_speed,\n}) => {\n\n\n  const currentDate = new Date(dt * 1000)\n\n  return (\n    <div className=\"current-day\">\n\n      <div className=\"current-day__main-info card\">\n        <h2>\n          {currentDate.toLocaleDateString(\"en-US\", { weekday: 'long' })}\n        </h2>\n        <div className=\"current-day__icon \">\n          <img\n            src={`http://openweathermap.org/img/w/${weather[0].icon}.png`}\n            alt=\"weather\"\n          />\n          <div className=\"current-day__img-description\">\n            {weather[0].description}\n          </div>\n        </div>\n        <div className=\"current-day__temp\">\n          {kelvinToCelsius(temp.day)}\n        </div>\n      </div>\n\n      <div className=\"current-day__city-name\">\n        <h1>{cityName}</h1>\n      </div>\n\n      <div className=\"current-day__details\">\n        <span>\n          <span>Date:</span> <span>{currentDate.toLocaleDateString(\"uk-UA\")}</span>\n\n        </span>\n        <span>\n          <span>Wind Speed:</span> <span>{`${wind_speed} m/s`} </span>\n\n        </span>\n        <span>\n          <span>Humidity:</span> <span>{humidity}</span>\n        </span>\n      </div>\n    </div>\n  )\n}\n","import React, { useContext } from 'react';\n\nimport { kelvinToCelsius } from '../../helpers.js'\nimport { IndexDayContext } from '../../App'\nimport classNames from 'classnames';\n\n\nimport './Weekday.scss';\n\n\nexport const Weekday = ({\n  index,\n  dt,\n  temp,\n  weather\n}) => {\n\n  const { indexDay, setIndexDay } = useContext(IndexDayContext)\n  const currentDate = new Date(dt * 1000)\n\n  return (\n    <li className={classNames(\n      'weekday',\n      'card',\n      { 'card--active': index === indexDay }\n    )}\n      onClick={() => setIndexDay(index)}\n    >\n      <h2 className=\"weekday__name\">\n        {currentDate.toLocaleDateString(\"en-US\", { weekday: 'long' })}\n      </h2>\n      <div className=\"weekday__icon\">\n        <img\n          src={`http://openweathermap.org/img/w/${weather[0].icon}.png`}\n          alt=\"weather\"\n        />\n      </div>\n      <div className=\"weekday__temp\">\n        {kelvinToCelsius(temp.day)}\n      </div>\n    </li>\n  )\n}\n\n\n\n\n\n\n\n\n\n// export const Card = ({ index, dayData = {} }) => {\n\n//   const { indexDay, setIndexDay } = useContext(IndexDayContext)\n\n\n//   const {\n//     dt,\n//     temp,\n//     weather,\n//   } = dayData;\n\n//   const currentDate = new Date(dt * 1000)\n\n//   return (\n//     <li className={classNames(\n//       'weekday',\n//       'card',\n//       { 'card--active': index === indexDay }\n//     )}\n//     onClick={() => setIndexDay(index)}\n//     >\n//       <h2 className=\"weekday__name\">\n//         {currentDate.toLocaleDateString(\"en-US\", { weekday: 'long' })}\n//       </h2>\n//       <div className=\"weekday__icon\">\n//         <img\n//           src={`http://openweathermap.org/img/w/${weather[0].icon}.png`}\n//           alt=\"weather\"\n//         />\n//       </div>\n//       <div className=\"weekday__temp\">\n//         {kelvinToCelsius(temp.day)}\n//       </div>\n//     </li>\n//   )\n// }\n","import React from 'react';\nimport { Weekday } from '../Weekday';\nimport './Weekdays.scss';\n\nexport const Weekdays = ({ forecast }) => {\n\n\n  return (\n    <ul className=\"weekdays\">\n      {\n        forecast.map((day, index) => (\n          <React.Fragment>\n            <Weekday\n              index={index}\n              {...day}\n            />\n          </React.Fragment>\n        ))\n      }\n    </ul>\n  )\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './Input.scss';\n\n\nconst debounce = (func, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer)\n    timer = setTimeout(func, delay, ...args)\n  }\n}\n\nexport const Input = ({ setCoords }) => {\n\n  const [inputValue, setInputValue] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [foundCities, setFoundCities] = useState([]);\n\n  const handleReset = () => {\n    setInputValue('')\n    setAppliedQuery('')\n  }\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n    if (value.length < inputValue.length) {\n      setFoundCities([])\n    }\n    setInputValue(value);\n    applayQuery(value);\n  }\n\n  const handleSubmit = (event) => {\n    const index = event.currentTarget.value || 0;\n\n    setCoords([\n      foundCities[index].latitude,\n      foundCities[index].longitude,\n    ]);\n    \n    setFoundCities([])\n    setTimeout(() => {\n      handleReset()\n    }, 1000);\n  }\n\n  const applayQuery = useCallback(\n    debounce(setAppliedQuery, 500)\n    , [])\n\n  useEffect(() => {\n    if (appliedQuery.length > 2) {\n      fetch(process.env.PUBLIC_URL + `https://geodb-free-service.wirefreethought.com/v1/geo/cities?limit=10&offset=0&namePrefix=${appliedQuery}&types=CITY&sort=-population`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"content-type\": \"application/json\",\n          data: { \"query\": '{ cities }' }\n        }\n      })\n        .then(response => response.json())\n        .then(res => setFoundCities(res.data))\n        .catch(err => { console.error(err) });\n    }\n  }, [appliedQuery])\n\n\n  return (\n    <div className=\"input\">\n      <div className=\"input__controllers\">\n        <input\n          type=\"text\"\n          placeholder=\"ex: Lviv\"\n          value={inputValue}\n          className='input__field'\n          onChange={handleChange}\n        />\n\n        <button\n          className=\"input__button\"\n          disabled={!foundCities.length}\n          onClick={handleSubmit}\n        >\n          go!\n        </button>\n      </div>\n\n      {!!foundCities.length &&\n        < ul className=\"input__options\">\n          {\n            foundCities.map((city, index) => {\n              const { name, country } = city;\n\n              return (\n                <li\n                  value={index}\n                  className=\"input__option\"\n                  onClick={(event) => {\n                    setInputValue(name)\n                    handleSubmit(event)\n                  }}\n                >\n                  <span> {name}</span>\n                  <span>{country}</span>\n                </li>\n              )\n            })\n          }\n        </ul>\n      }\n    </div >\n  )\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { getLocalForecast } from './api/weatherApiService';\nimport { CurrentDay } from './components/CurrentDay';\nimport { Weekdays } from './components/Weekdays';\nimport { Input } from './components/Input';\nimport './App.scss';\n\nexport const IndexDayContext = React.createContext()\n\nfunction App() {\n\n  const [coords, setCoords] = useState([]);\n  const [dataFromApi, setDataFromApi] = useState([]);\n  const [indexDay, setIndexDay] = useState(0)\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      setCoords([latitude, longitude])\n    })\n  }, [])\n\n  const handleFetch = (request) => {\n    const { cityName, forecast } = request;\n    const today = forecast.daily[0];\n    const weekWeather = forecast.daily.slice(0, 7)\n    today.cityName = cityName;\n\n    setDataFromApi([today, weekWeather])\n\n  }\n\n  useEffect(() => {\n    if (!coords.length) {\n      return;\n    }\n    const [latitude, longitude] = coords;\n    getLocalForecast([latitude, longitude])\n      .then(handleFetch)\n  }, [coords])\n\n  const [today, weekWeather] = dataFromApi;\n\n  return (\n    <div className=\"App\">\n      <Input setCoords={setCoords} />\n\n      {\n        !dataFromApi.length\n          ? <div className=\"message\">\n            <span>Allow geolocation to continue or choose city</span>\n          </div>\n          : <>\n            <CurrentDay\n              cityName={today.cityName}\n              {...weekWeather[indexDay]}\n            />\n            <IndexDayContext.Provider value={{ setIndexDay, indexDay }}>\n              <Weekdays forecast={weekWeather} />\n            </IndexDayContext.Provider>\n          </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","\nexport const getLocalForecast = (coords) => {\n  const [latitude, longitude] = coords;\n\n  return Promise.all([\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=5cce314eb75f7136d6791029de739d4e`)\n      .then(res => res.json())\n      .then(res => res.name),\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=current,hourly,minutely&appid=5cce314eb75f7136d6791029de739d4e`)\n      .then(res => res.json())\n  ]).then(res => ({cityName: res[0], forecast: res[1]}))\n}\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}